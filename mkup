#!/bin/bash
# Written by Kodp sloquet@student.42.fr

################################################################################
### OPTIONS SAVES /!\ DO NOT CHANGE LINE NUMBERS
SRC_DIR="." #L6
EXTENSION=".cpp" #L7
COMPILER="c++ -Wall -Werror -Wextra -std=c++98" #L8
EXEC_NAME="exec_name" #L9

#SRC_DIR="src"		# /!\ DO NOT CHANGE LINE NUMBER
#EXTENSION=".cpp"	# /!\ DO NOT CHANGE LINE NUMBER
#COMMAND="c++ -Wall -Werror -Wextra -std=c++98" # /!\ DO NOT CHANGE LINE NB 8
#XEC_NAME="program_name" # /!\ DO NOT CHANGE LINE NUMBER #L9
AUTO_UPDATE=24 #L15
MKUP_VERSION="mkup.23.01.03+"

################################################################################
MKUP_PATH="$HOME/.local/mkup"
# mkup templates
MKUP_TP_CPP="$HOME/.local/mkup_tp_makefile_cpp"

################################################################################
### MKUP UNINSTALL
function	mkup_uninstall() {
	cp "$HOME/.zshrc" "$HOME/.zshrc_mkup_backup"
	sed -i '/mkup/d' "$HOME/.zshrc"
	rm -rf "$MKUP_PATH" 2>/dev/null
}

if [[ "$0" != $MKUP_PATH ]]; then
	mkup_uninstall
fi

function	mkup_update() {
	echo -e "\033[33mMKUP:mkup update...\033[0m"
	git clone git@github.com:kodpe/mkup.git /tmp/mkup_update_08231 >/dev/null 2>&1
	cp /tmp/mkup_update_08231/mkup /tmp  && rm -rf /tmp/mkup_update_08231
	/tmp/mkup
	if [[ "$0" != $MKUP_PATH ]]; then
		rm $0
	fi
}

if [[ $AUTO_UPDATE -eq 0 ]]; then
	mkup_update
	exit 0
else
	AUTO_UPDATE=$(( $AUTO_UPDATE - 1 ))
	sed -i "15s+.*+AUTO_UPDATE=$AUTO_UPDATE #L15+" $0
fi

################################################################################
### MAIN CPP
function create_main_cpp() {
	if [[ -f "main.cpp" ]]; then
		echo "$SNAME:ERROR:main.cpp already exist"
		return 1
	fi
	echo "$SNAME:'$PWD'"
	echo "$SNAME:create main.cpp ..."

	cat << EOF > main.cpp
#include <iostream>

int	main(int ac, char **argv, char **env)
{
	return 0;
}
EOF
	echo "$SNAME:new main.cpp done!"
}

################################################################################
### CLASS TEMPLATE CPP
function create_class_cpp() {
	local SNAME="MKUP"
	local CLASSNAME="$1"
	local CLASSNAME_UP="${1^^}_CLASS_HPP"

	if [[ -z $CLASSNAME ]]; then
		echo "$SNAME:ERROR:need an argument for the class name"
		return 1
	fi

	if [[ -f "NAME.hpp" || -f "NAME.cpp" ]]; then
		echo "$SNAME:ERROR:NAME.hpp/.cpp already exist"
		return 1
	fi

	if [[ -f "$CLASSNAME.hpp" || -f "$CLASSNAME.cpp" ]]; then
		echo "$SNAME:ERROR:$CLASSNAME.hpp/.cpp already exist"
		return 1
	fi

	echo "$SNAME:'$PWD'"
	echo "$SNAME:create a class '$CLASSNAME' ..."

	cat << EOF > NAME.hpp
#ifndef NAME_CLASS_HPP
# define NAME_CLASS_HPP

#include <iostream>
#include <string>

class NAME
{
	public:
		NAME();
		NAME(const std::string &name);
		NAME(const NAME &other);
   	   ~NAME ();
		NAME & operator=(const NAME &other);

	private:
		std::string	_name;
	protected:
};

#endif /* NAME_CLASS_HPP */
EOF
	sed "s/NAME_CLASS_HPP/$CLASSNAME_UP/g" NAME.hpp > $CLASSNAME.hpp
	sed -i "s/NAME/$CLASSNAME/g" $CLASSNAME.hpp
	rm NAME.hpp

	cat << EOF > NAME.cpp
#include "NAME.hpp"

NAME::NAME() : _name("default")
{
	std::cout << "NAME default constructor" << std::endl;
}

NAME::NAME(const std::string &name) : _name(name)
{
	std::cout << "NAME constructor" << std::endl;
}

NAME::NAME(const NAME &other)
{
	std::cout << "NAME copy constructor" << std::endl;
	*this = other;
}

NAME::~NAME()
{
	std::cout << "NAME destructor" << std::endl;
}

NAME&	NAME::operator=(const NAME &other)
{
	std::cout << "NAME assignation operator" << std::endl;
	this->_name = other._name;
	return *this;
}

//void	NAME::set_()
//void	NAME::get_()
//void	NAME::()
//void	NAME::_()
EOF
	sed "s/NAME/$CLASSNAME/g" NAME.cpp > $CLASSNAME.cpp
	rm NAME.cpp

	echo "$SNAME:new class '$CLASSNAME.hpp' '$CLASSNAME'.cpp done!"
}

################################################################################
### MAKEFILE TEMPLATE CPP
function create_template_cpp() {
cat << EOF > $MKUP_TP_CPP
#-mkup-auto-sources-###############################################542251121222#
SRC_DIR		=	"$SRC_DIR"
EXTENSION	=	"$EXTENSION"
SRC_LIST	=	\$(addsuffix \$(EXTENSION), \\
				main \\
				)
SRC			=	\$(addprefix \$(SRC_DIR)/, \$(SRC_LIST))
#-mkup-auto-sources-###############################################542251121222#

INC_DIR		= 	.
OBJ_DIR		=	obj
OBJ			=	\$(addprefix \$(OBJ_DIR)/, \$(SRC_LIST:\$(EXTENSION)=.o))

CC			=	@c++
CFLAGS		= 	-Wall -Werror -Wextra -std=c++98 -MMD -I \$(INC_DIR)

RM			= 	@rm -rf 2>/dev/null
NOPR		= 	--no-print-directory

#colors
cw			=	"\033[0m"
cr			=	"\033[31m"
cg			=	"\033[32m"
cb			=	"\033[34m"
cp			=	"\033[35m"

NAME		= 	"$EXEC_NAME"

######################################################################
\$(OBJ_DIR)/%.o:\$(SRC_DIR)/%.cpp
			@mkdir -p \$(dir \$@)
			\$(CC) \$(CFLAGS) -c $< -o \$@
#\\

			@echo \$(cg)"(@) "\$@" (<) "$< \$(cw)

\$(NAME):	\$(OBJ)
			\$(CC) \$(CFLAGS) -o \$(NAME) \$(SRC)
			@echo \$(cg)\$(NAME)\$(cw)

all:		\$(NAME)

clean:
			\$(RM) \$(OBJ_DIR)
			\$(RM) \$(NAME).d a.d
			@echo -n \$(cr)
			@echo \$(OBJ) | tr ' ' '\n'
			@echo -n \$(cw)

fclean:
			make -s -j clean
			\$(RM) \$(NAME)
			@echo \$(cr)\$(NAME)\$(cw)

re:			fclean
			make -s -j all

run:
			make -s -j all
			./\$(NAME)

val:
			make -s -j all
			valgrind				\\
			--show-leak-kinds=all	\\
			--track-origins=yes		\\
			--leak-check=full		\\
			./\$(NAME)

verbose:
			@echo \$(cp)"SRC_DIR  : "\$(SRC_DIR)
			@echo \$(cp)"EXTENSION: "\$(EXTENSION)
			@echo \$(cp)"SRC_LIST : "\$(SRC_LIST)
			@echo \$(cp)"SRC      : "\$(SRC)
			@echo -n \$(cb) && ls -CRAB \$(SRC_DIR)/* ||true
			@echo
			@echo \$(cp)"INC_DIR  : "\$(INC_DIR)
			@echo -n \$(cb) && ls -CRAB \$(INC_DIR)/* ||true
			@echo
			@echo \$(cp)"OBJ_DIR  : "\$(OBJ_DIR)
			@echo \$(cp)"OBJ      : "\$(OBJ)
			@echo -n \$(cb) && ls -CRAB \$(OBJ_DIR)/*.o ||true

			@echo
			@echo \$(cp)"DEPS     : "\$(DEPS)
			@echo -n \$(cb) && ls -CRAB \$(OBJ_DIR)/*.d ||true
			@echo
			@echo \$(cp)"CC       : "\$(CC)
			@echo \$(cp)"CFLAGS   : "\$(CFLAGS)
			@echo \$(cp)"NAME     : "\$(NAME)
			@echo -n \$(cw)

DEPS		=	\$(OBJ:.o=.d)
-include \$(DEPS)

.PHONY:		all clean fclean re run val verbose
.SILENT: 	all clean fclean re run val verbose \$(NAME)

EOF
}

################################################################################
### UTILS FUNCTIONS
function	msg_fail() { echo -e "\033[31mMKUP:ERROR:$1\033[0m" ; }
function	msg_done() { echo -e "MKUP:$1" ; }
function	msg_warn() { echo -e "\033[33mMKUP:$1\033[0m" ; }
function	msg_info() { echo -e "MKUP:$1" ; }
function	mkup_usage() {
	echo "Usage: mkup [OPTION]... [DIRECTORY]"
	echo "       mkup -c CLASSNAME..."
	echo
	echo "Update or create a makefile"
	echo
	echo "OPTIONS"
	echo "    -h, --help"
	echo "           Print this help and exit."
	echo
	echo "    -n, --name <exec_name>"
	echo "           Specify the executable name."
	echo
	echo "    -s, --source-dir <src_dir>"
	echo "           Specify the source directory, subfolders allowed."
	echo
	echo "    -c, --class <name> ..."
	echo "           Create a cpp canonical class <name> and exit."
	echo "           Can create multiple classes: <name1> <name2> ..."
	echo
	echo "    -m, --main"
	echo "           Create a cpp basic main and exit."
	echo
	echo "SCRIPT OPTIONS"
	echo "    --default-source-dir <src_dir>"
	echo "           Change the default source directory and exit."
	echo "           Actually is 'DIRECTORY/$SRC_DIR'"
	echo
	echo "    --default-extension <.extension>"
	echo "           Change the default extension and exit."
	echo "           Actually is '$EXTENSION'"
	echo
	echo "    --default-name <exec_name>"
	echo "           Change the default executable name and exit."
	echo "           Actually is '$EXEC_NAME'"
	echo
	echo "    --uninstall"
	echo "           Remove mkup from your computer."
	echo
	echo "    -u, --update"
	echo "           Get the latest mkup version."
	echo
	echo "    -v, --version"
	echo "           Display version and exit."
	echo
	echo "MAKEFILE RULES"
	echo "     all, clean, fclean, re"
	echo
	echo "     run     : make and execute"
	echo
	echo "     val     : make and execute with valgrind"
	echo "                --show-leak-kinds=all"
	echo "                --track-origins=yes"
	echo "                --leak-check=full"
	echo
	echo "     verbose : display makefile parameters"
	echo
	echo "NOTES"
	echo "    <> The compilation command used is:"
	echo "       '$COMPILER'"
	echo
	echo "    <> If DIRECTORY isnt specified, default DIRECTORY is '.'"
	echo
	echo "    <> The makefile uses two mkup tokens like this one:"
	echo "       '#-mkup-auto-sources ...',"
	echo "       which contain all the source files,"
	echo "       for safety makefiles without keys will be ignored."
	echo
	echo "VERSION"
	echo "    $MKUP_VERSION"
	echo
	echo "AUTHOR"
	echo "    @Kodp sloquet@student.42.fr"
	echo
}

function	usage() {
	mkup_usage > /tmp/mkup_man
	less /tmp/mkup_man
	rm -f /tmp/mkup_man
}


################################################################################
### OPTIONS HANDLER

ARG_DIRECTORY=$1
if [[ "${1:0:1}" == "-"  ]]; then
	ARG_DIRECTORY=$3
	if [[ "${3:0:1}" == "-"  ]]; then
		ARG_DIRECTORY=$5
	fi
fi

if [[ "$1" == "--help" || "$1" == "-h" ]]; then
	usage
	exit 0
fi

if [[ "$1" == "--class" || "$1" == "-c" ]]; then
	for ((i = 2; i <= $#; i++)); do
		create_class_cpp ${!i}
	done
	exit 0
fi

if [[ "$1" == "--main" || "$1" == "-m" ]]; then
	create_main_cpp
	exit 0
fi

if [[ "$1" == "--version" || "$1" == "-v" ]]; then
	echo $MKUP_VERSION
	exit 0
fi

if [[ "$1" == "--uninstall" ]]; then
	msg_info "mkup uninstall done"
	mkup_uninstall
	exit 0
fi

if [[ "$1" == "--update" || "$1" == "-u" ]]; then
	mkup_update
	exit 0
fi

if [[ "$1" == "--default-source-dir" ]]; then
	msg_info "default-source-dir set on '$2'"
	sed -i "6s+.*+SRC_DIR=\"$2\" #L6+" $0
	exit 0
fi

if [[ "$1" == "--default-extension" ]]; then
	msg_info "default-extension set on '$2'"
	sed -i "7s+.*+EXTENSION=\"$2\" #L7+" $0
	exit 0
fi

#if [[ "$1" == "--def-compiler" ]]; then
#	msg_info "default-compiler set on '$2'"
#	sed -i "8s+.*+COMPILER=\"$2\" #L8+" $0
#	exit 0
#fi

if [[ "$1" == "--default-name" ]]; then
	msg_info "default-name set on '$2'"
	sed -i "9s+.*+EXEC_NAME=\"$2\" #L9+" $0
	exit 0
fi

if [[ "${1:0:1}" == "-" ]]; then
	if [[ "$1" == "--source-dir" || "$1" == "-s" ]]; then
		SRC_DIR="$2"
	elif [[ "$1" == "--name" || "$1" == "-n" ]]; then
		EXEC_NAME="$2"
	else
		usage
		exit 1
	fi
fi

if [[ "${3:0:1}" == "-" ]]; then
	if [[ "$3" == "--source-dir" || "$3" == "-s" ]]; then
		SRC_DIR="$4"
	elif [[ "$3" == "--name" || "$3" == "-n" ]]; then
		EXEC_NAME="$4"
	else
		usage
		exit 1
	fi
fi

### BUG WITH HOME TODO
if [[ "$PWD" == "$HOME" ]]; then #FIX BUG WITH SRC_DIR = . if executed in HOME
	if [[ "$SRC_DIR" == "." ]]; then
		msg_fail "pwd:home error, src_dir == '.', invalid localisation"
		exit 1
	fi
fi

################################################################################
### CREATE SOURCE HEADER
SRC_DIR="${SRC_DIR%/}" # remove last '/'
SRC_HEAD="\
SRC_DIR\t\t=\t$SRC_DIR\n\

EXTENSION\t=\t\"$EXTENSION\"\n\
SRC_LIST\t=\t\$(addsuffix \$(EXTENSION), \\"
SRC_END="\
SRC\t\t\t=\t\$(addprefix \$(SRC_DIR)/, \$(SRC_LIST))"

################################################################################
### GET ARG MAKEFILE PATH
MAKEPATH="${ARG_DIRECTORY%/}" # remove last '/'
if [[ -z $MAKEPATH ]]; then
	MAKEPATH="."
fi
MAKEFILE="$MAKEPATH/Makefile"
FINDPATH="$MAKEPATH/$SRC_DIR/"

# debug
# echo "EXTENSION:$EXTENSION"
# echo "SRC_DIR  :$SRC_DIR"
# echo "SRC_HEAD :$SRC_HEAD"
# echo "MAKEPATH :$MAKEPATH"
# echo "FINDPATH :$FINDPATH"
# echo "MAKEFILE :$MAKEFILE"
# DEPTH=$(tr -dc '/' <<< $MAKEPATH | wc -c)
#echo $DEPTH

################################################################################
### AUTO ALIAS SETUP
function	setup_alias() {

	if [[ ! -f ~/.zshrc ]]; then
		msg_fail "zsh: .zshrc not found"
		return ;
	fi

	if ! grep -q "mkup" ~/.zshrc; then
		echo "# mkup - auto update or create a makefile" >> ~/.zshrc
		echo 'alias mkup="~/.local/mkup"' >> ~/.zshrc
	fi

	if [ ! -d "$HOME/.local" ]; then
		if mkdir ~/.local; then
			msg_fail "mkdir: install failed"
			return ;
		fi
	fi

	if [[ ! -e $MKUP_PATH ]]; then
		if ! cp $0 $MKUP_PATH; then
			msg_fail "cp: install failed"
			return ;
		fi

		if ! chmod +x $MKUP_PATH; then
			msg_fail "chmod: install failed"
			return ;
		fi
		usage
		rm $0 # install success
		exec zsh
		exit 0
	fi

	if [[ ! -f $MKUP_TP_CPP ]]; then
		create_template_cpp
	fi
}
setup_alias

################################################################################
### DIRECTORIES CHECK
if [[ ! -d $MAKEPATH ]]; then
	msg_info "'$PWD/$MAKEPATH'"
	msg_fail "invalid directory '$MAKEPATH'\n"
	usage
	exit 1
fi

if [[ ! -d $FINDPATH ]]; then
	TMP_FINDPATH=$(echo $FINDPATH | sed -e "s#\./##")
	msg_info "'$PWD/$TMP_FINDPATH'"
	msg_info "invalid directory '$TMP_FINDPATH'"
fi

################################################################################
###  GET SOURCE FILES
TAB4="\t\t\t\t"
FILES=$(find "$FINDPATH" -name "*$EXTENSION" 2>/dev/null |
		sed -e "s/$EXTENSION$//" | \
		sed -e 's/$/ \\/' |
		sed -e "s#$MAKEPATH\/$SRC_DIR\/#$TAB4#")
if [[ -z $FILES ]]; then
	#msg_info "no source files  :'$EXTENSION' found in '$FINDPATH'"
	FILES="			__MKUP_NO_SOURCE_FOUND__ \\"
fi

################################################################################
### CHECK FOR MAKEFILE

if [[ ! -e $MAKEFILE ]]; then
	msg_info "makefile not found"
	read -p "do you want to create a new makefile [y/n]? " -n 1 -r
	if [[ ! $REPLY =~ ^[Yy]$ ]]; then
		echo
		exit 1
	fi
	echo
	msg_info "create a new makefile..."
	if [[ ! -d $FINDPATH ]]; then
		msg_info "create a source directory..."
		if ! mkdir $FINDPATH; then
			msg_fail "can't create a new source directory here"
			msg_fail "mkdir $FINDPATH"
			exit 1
		fi
	fi
	msg_info "sources directory: $FINDPATH*$EXTENSION"
	PUT_MAKEFILE=$(echo $MAKEFILE | sed -e "s#\./##")

	if cp $MKUP_TP_CPP $MAKEFILE; then
		msg_done "makefile created :$PWD/$PUT_MAKEFILE"
	else
		msg_fail "can't create a new makefile here"
		msg_fail "cp $MKUP_TP_CPP $MAKEFILE"
		exit 1
	fi
fi

################################################################################
### CHECK FOR MAKEFILE MKUP KEYS
KEY="mkup-auto-sources"
ID=$(date +%S%H%M%d%m%y)
REF=$(cat -n $MAKEFILE | grep "\-$KEY\-" | awk '{print $1}')
if [[ ! $(echo $REF | wc -w) -eq 2 ]]; then
	msg_fail "invalid makefile mkup token '#-$KEY-'"
	usage
	exit 1
fi

################################################################################
# GET UNCHANGED PART OF MAKEFILE
TOP=$(cat $MAKEFILE | head -$(($(echo $REF | awk '{print $1}') - 1)))
BOT=$(cat $MAKEFILE | tail +$(($(echo $REF | awk '{print $2}') + 1)))

################################################################################
### CREATE NEW MAKEFILE
echo -n "$TOP" >$MAKEFILE
echo "#-$KEY-###############################################$ID#" >>$MAKEFILE
echo -e "$SRC_HEAD" >>$MAKEFILE
echo "$FILES" >>$MAKEFILE
echo -e "\t\t\t\t)" >>$MAKEFILE
echo -e "$SRC_END" >> $MAKEFILE
echo "#-$KEY-###############################################$ID#" >>$MAKEFILE
echo "$BOT" >>$MAKEFILE

################################################################################
### EXIT SUCCESS
MSG_MAKEFILE=$(echo $MAKEFILE | sed -e "s#\./##")
MSG_FINDPATH=$(echo $FINDPATH | sed -e "s#\./##")
msg_done "makefile updated :$PWD/$MSG_MAKEFILE"
msg_done "sources files    :$PWD/$MSG_FINDPATH**$EXTENSION"

################################################################################
###  GET SOURCE FILES LAST REPORT
TAB4="\t\t\t\t"
FILES=$(find "$FINDPATH" -name "*$EXTENSION" |
		sed -e "s/$EXTENSION$//" | \
		sed -e 's/$/ \\/' |
		sed -e "s#$MAKEPATH\/$SRC_DIR\/#$TAB4#")
if [[ -z $FILES ]]; then
	msg_info "no source files  :'$EXTENSION' found in '$FINDPATH'"
fi
if [[ -f $MKUP_TP_CPP ]]; then
	rm $MKUP_TP_CPP
fi
msg_done "Done!"
exit 0
